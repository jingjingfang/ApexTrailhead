/*Create an Apex trigger that sets an accountâ€™s Shipping Postal Code to match the Billing Postal Code if the Match Billing Address option is selected. Fire the trigger before inserting an account or updating an account.
Note: The resulting API Name should be Match_Billing_Address__c.
Create an Apex trigger:
Name: AccountAddressTrigger
Object: Account
Events: before insert and before update
Condition: Match Billing Address is true
Operation: set the Shipping Postal Code to match the Billing Postal Code */

trigger AccountAddressTrigger on Account (before insert,before update) {
    for (Account acc: Trigger.new)  {
        if(acc.Match_Billing_Address__c == true) {
            acc.ShippingPostalCode = acc.BillingPostalCode;
        }


/*Create a bulkified Apex trigger that adds a follow-up task to an opportunity if its stage is Closed Won. Fire the Apex trigger after inserting or updating an opportunity.
Create an Apex trigger:
Name: ClosedOpportunityTrigger
Object: Opportunity
Events: after insert and after update
Condition: Stage is Closed Won
Operation: Create a task:
Subject: Follow Up Test Task
WhatId: the opportunity ID (associates the task with the opportunity)
Bulkify the Apex trigger so that it can insert or update 200 or more opportunities */

trigger ClosedOpportunityTrigger on Opportunity (after insert, after update) {
    List<Task> newTasks= new List<Task>();      
    
    for(Opportunity opp: Trigger.new) {
        If(opp.StageName == 'Closed Won') {
            Task followUpTask = new Task(Subject = 'Follow Up Test Task',WhatId = opp.Id);  //Create the Task sObject  
            newTasks.add(followUpTask);
            
        }
    }
    
    if(newTasks.size()>0) {
        insert newTasks;
    }
    
}

//another solution
trigger ClosedOpportunityTrigger on Opportunity(after insert, after update) {
    List<Task> taskList = new List<Task>();
    
    for (Opportunity opp: trigger.new) {
        if(opp.StageName =='Closed Won') {
            taskList.add(new Task(WhatId=opp.Id, Subject='Follow Up Test Task'));
            
        }
    }
    
    if (taskList.size() > 0) {
        insert taskList;
    }
}


/*Create a method for inserting accounts.
The Apex class must be called AccountHandler and be in the public scope
The Apex class must have a public static method called insertNewAccount
The method must accept an incoming string as a parameter, which will be used to create the Account name
The method must insert the account into the system and then return the record
The method must also accept an empty string, catch the failed DML and then return null*/

public class AccountHandler {
    public static Account insertNewAccount(String accName){
        if(accName!=null) {
            try {
                // This causes an exception because 
                //   the required Name field is not provided.
                Account acct = new Account(Name=accName);
                insert acct;
                return acct;
                
            }
            catch (DmlException e) {
                System.debug('Account Not created');
                             return null;                           
                             
                             }
                             
                             } else{
                                 return null;
                             }                          
                                                  
                             
                             }
}



/*Create a unit test for a simple Apex class.
Install a simple Apex class, write unit tests that achieve 100% code coverage for the class, and run your Apex tests.
The Apex class to test is called 'VerifyDate', and the code is available here. Copy and paste this class into your Developer Edition via the Developer Console.
'VerifyDate' is a class which tests if a date is within a proper range, and if not will return a date that occurs at the end of the month within the range.
The unit tests must be in a separate test class called 'TestVerifyDate'.
The unit tests must cover scenarios for all lines of code included in the Apex class, resulting in 100% code coverage.*/

public class VerifyDate {
	
	//method to handle potential checks against two dates
	public static Date CheckDates(Date date1, Date date2) {
		//if date2 is within the next 30 days of date1, use date2.  Otherwise use the end of the month
		if(DateWithin30Days(date1,date2)) {
			return date2;
		} else {
			return SetEndOfMonthDate(date1);
		}
	}
	
	//method to check if date2 is within the next 30 days of date1
	private static Boolean DateWithin30Days(Date date1, Date date2) {
		//check for date2 being in the past
        	if( date2 < date1) { return false; }
        
        	//check that date2 is within (>=) 30 days of date1
        	Date date30Days = date1.addDays(30); //create a date 30 days away from date1
		if( date2 >= date30Days ) { return false; }
		else { return true; }
	}

	//method to return the end of the month of a given date
	private static Date SetEndOfMonthDate(Date date1) {
		Integer totalDays = Date.daysInMonth(date1.year(), date1.month());
		Date lastDay = Date.newInstance(date1.year(), date1.month(), totalDays);
		return lastDay;
	}

}

@isTest
public class TestVerifyDate {
      
 static testMethod void TestVerifyDate() {
      VerifyDate.CheckDates(System.today(),System.today().addDays(10));
       VerifyDate.CheckDates(System.today(),System.today().addDays(78));
    }

}


